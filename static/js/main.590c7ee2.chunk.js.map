{"version":3,"sources":["components/Stopwatch.js","components/SequenceElement.js","components/SequenceTimeline.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Stopwatch","props","startTimer","setState","timerOn","timerTime","state","timerStart","Date","now","noSleep","enable","timer","setInterval","onChange","stopTimer","disable","clearInterval","resetTimer","NoSleep","this","seconds","Math","floor","slice","minutes","className","onClick","Component","SequenceElementStatus","SequenceElement","timeRemaining_s","totalTime_s","status","remainingSeconds","remainingMinutes","totalSeconds","totalMinutes","safariRenderHack","opacity","style","name","defaultProps","SequenceTimeline","timeToAllocate","elapsedSeconds","completedElements","updatedChildren","React","Children","map","children","child","i","timeToReduce","min","cloneElement","critThreshold","warnThreshold","App","time_ms","updateTime_ms","newTime_ms","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.590c7ee2.chunk.js","sourcesContent":["/*\nAdapted from https://github.com/peterdurham/timers-demo/blob/master/src/components/Stopwatch.js\n*/\n\nimport React, { Component } from \"react\";\nimport \"../App.css\";\nimport NoSleep from 'nosleep.js';\n\nclass Stopwatch extends Component {\n  constructor(props) {\n    super(props)\n    this.noSleep = new NoSleep();\n    this.state = {\n      timerOn: false,\n      timerStart: 0,\n      timerTime: 0\n    };\n  }\n\n  startTimer = () => {\n    this.setState({\n      timerOn: true,\n      timerTime: this.state.timerTime,\n      timerStart: Date.now() - this.state.timerTime\n    });\n    this.noSleep.enable();\n    this.timer = setInterval(() => {\n      this.setState({\n        timerTime: Date.now() - this.state.timerStart\n      });\n      if(this.props.onChange)\n      {\n        this.props.onChange(this.state.timerTime);\n      }\n    }, 1000);\n  };\n\n  stopTimer = () => {\n    this.setState({ timerOn: false });\n    this.noSleep.disable();\n    clearInterval(this.timer);\n  };\n\n  resetTimer = () => {\n    this.setState({\n      timerStart: 0,\n      timerTime: 0\n    });\n    if(this.props.onChange)\n    {\n      this.props.onChange(0);\n    }\n  };\n\n  render() {\n    const { timerTime } = this.state;\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n    return (\n      <div className=\"Stopwatch\">\n        {/*<div className=\"Stopwatch-header\">Stopwatch</div>*/}\n        <div className=\"Stopwatch-display\">\n          {minutes} : {seconds}\n        </div>\n        {this.state.timerOn === false && this.state.timerTime === 0 && (\n          <button onClick={this.startTimer}>Start</button>\n        )}\n        {this.state.timerOn === true && (\n          <button onClick={this.stopTimer}>Stop</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n          <button onClick={this.startTimer}>Resume</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n          <button onClick={this.resetTimer}>Reset</button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\n\nexport const SequenceElementStatus = {\n  INACTIVE: \"inactive\",\n  GOOD_TIME: \"high\",\n  WARN_TIME: \"med\",\n  CRIT_TIME: \"low\",\n  EXPIRED: \"expired\",\n}\n\nclass SequenceElement extends Component {\n  constructor(props) {\n    super(props);\n    if( typeof this.props.timeRemaining_s === 'undefined')\n    {\n      this.props.timeRemaining_s = this.props.totalTime_s;\n    }\n    if( typeof this.props.status === 'undefined')\n    {\n      this.props.status = SequenceElementStatus.INACTIVE;\n    }\n  }\n\n  render() {\n    const { totalTime_s, timeRemaining_s } = this.props;\n    let remainingSeconds = (\"0\" + (timeRemaining_s % 60)).slice(-2);\n    let remainingMinutes = (\"0\" + (Math.floor(timeRemaining_s / 60) % 60)).slice(-2);\n    let totalSeconds = (\"0\" + (totalTime_s % 60)).slice(-2);\n    let totalMinutes = (\"0\" + (Math.floor(totalTime_s / 60) % 60)).slice(-2);\n    const safariRenderHack = { opacity : timeRemaining_s % 2 ? 0.99 : 1};\n    return (\n      <div className={\"SequenceElementBlock Block-\" + this.props.status}\n           style={safariRenderHack}>\n        <p className={\"SequenceElementTitle Title-\" + this.props.status}>\n          {this.props.name}\n        </p>\n        <p className={\"SequenceElementTimeRemaining Time-\" + this.props.status}>\n          {remainingMinutes}:{remainingSeconds} / {totalMinutes}:{totalSeconds}\n        </p>\n      </div>\n    )\n  }\n}\n\nSequenceElement.propTypes = {\n  name: PropTypes.string,\n  totalTime_s: PropTypes.number,\n  timeRemaining_s: PropTypes.number,\n};\n\nSequenceElement.defaultProps = {\n  name: \"\",\n  totalTime_s: 0,\n};\n\nexport default SequenceElement;\n","import React, { Component } from \"react\";\nimport {SequenceElementStatus} from \"./SequenceElement\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\n\nclass SequenceTimeline extends Component {\n  render() {\n    var timeToAllocate = this.props.elapsedSeconds;\n    var completedElements = 0;\n    const updatedChildren = React.Children.map(this.props.children,\n                                               (child, i) => {\n                                                let timeToReduce = Math.min(child.props.totalTime_s, timeToAllocate);\n                                                let timeRemaining_s = child.props.totalTime_s - timeToReduce;\n                                                timeToAllocate -= timeToReduce;\n                                                if(timeRemaining_s === 0) {\n                                                  completedElements++;\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.EXPIRED })\n                                                } else if(timeRemaining_s <= this.props.critThreshold) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.CRIT_TIME })\n                                                } else if(timeRemaining_s <= this.props.warnThreshold) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.WARN_TIME })\n                                                } else if( timeToReduce > 0 || i === completedElements ) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.GOOD_TIME })\n                                                } else {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.INACTIVE })\n                                                }\n                                               });\n\n    return (\n      <div className=\"SequenceTimeline\">\n        { updatedChildren }\n      </div>\n    )\n  }\n}\n\nSequenceTimeline.propTypes = {\n  elapsedSeconds: PropTypes.number,\n  warnThreshold: PropTypes.number,\n  critThreshold: PropTypes.number,\n};\n\nSequenceTimeline.defaultProps = {\n  elapsedSeconds: 0,\n  warnThreshold: 30,\n  critThreshold: 10,\n};\n\nexport default SequenceTimeline;","import \"./App.css\";\nimport React from \"react\"\nimport Stopwatch from \"./components/Stopwatch\"\nimport SequenceTimeline from \"./components/SequenceTimeline\"\nimport SequenceElement from \"./components/SequenceElement\"\n\nclass App extends React.Component {\n  state = {time_ms : 0}\n\n  updateTime_ms = (newTime_ms) => {\n    this.setState({time_ms: newTime_ms});\n  }\n\n  render() {\n    return (\n      <body>\n        <div className=\"App App-body\">\n          <Stopwatch onChange={this.updateTime_ms}/>\n          <SequenceTimeline elapsedSeconds={Math.floor(this.state.time_ms/1000)}>\n            <SequenceElement name=\"Introductions\"\n                             totalTime_s={120}/>\n            <SequenceElement name=\"Project Presentation\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Project Q&A\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Robot Design Presentation\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Robot Design Q&A\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Core Values Q&A\"\n                             totalTime_s={240}/>\n            <SequenceElement name=\"Team Feedback\"\n                             totalTime_s={240}/>\n          </SequenceTimeline>\n        </div>\n      </body>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}