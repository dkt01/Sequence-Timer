{"version":3,"sources":["components/Stopwatch.js","components/SequenceElement.js","components/SequenceTimeline.js","registerServiceWorker.js","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","state","timerOn","timerStart","timerTime","startTimer","setState","Date","now","timer","setInterval","props","onChange","stopTimer","clearInterval","resetTimer","this","seconds","Math","floor","slice","minutes","className","onClick","Component","SequenceElementStatus","SequenceElement","timeRemaining_s","totalTime_s","status","remainingSeconds","remainingMinutes","totalSeconds","totalMinutes","safariRenderHack","opacity","style","name","defaultProps","SequenceTimeline","timeToAllocate","elapsedSeconds","completedElements","updatedChildren","React","Children","map","children","child","i","timeToReduce","min","cloneElement","critThreshold","warnThreshold","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","App","time_ms","updateTime_ms","newTime_ms","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca1fea51.chunk.js","sourcesContent":["/*\nAdapted from https://github.com/peterdurham/timers-demo/blob/master/src/components/Stopwatch.js\n*/\n\nimport React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Stopwatch extends Component {\n  state = {\n    timerOn: false,\n    timerStart: 0,\n    timerTime: 0\n  };\n\n  startTimer = () => {\n    this.setState({\n      timerOn: true,\n      timerTime: this.state.timerTime,\n      timerStart: Date.now() - this.state.timerTime\n    });\n    this.timer = setInterval(() => {\n      this.setState({\n        timerTime: Date.now() - this.state.timerStart\n      });\n      if(this.props.onChange)\n      {\n        this.props.onChange(this.state.timerTime);\n      }\n    }, 1000);\n  };\n\n  stopTimer = () => {\n    this.setState({ timerOn: false });\n    clearInterval(this.timer);\n  };\n\n  resetTimer = () => {\n    this.setState({\n      timerStart: 0,\n      timerTime: 0\n    });\n    if(this.props.onChange)\n    {\n      this.props.onChange(0);\n    }\n  };\n\n  render() {\n    const { timerTime } = this.state;\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n    return (\n      <div className=\"Stopwatch\">\n        {/*<div className=\"Stopwatch-header\">Stopwatch</div>*/}\n        <div className=\"Stopwatch-display\">\n          {minutes} : {seconds}\n        </div>\n        {this.state.timerOn === false && this.state.timerTime === 0 && (\n          <button onClick={this.startTimer}>Start</button>\n        )}\n        {this.state.timerOn === true && (\n          <button onClick={this.stopTimer}>Stop</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n          <button onClick={this.startTimer}>Resume</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n          <button onClick={this.resetTimer}>Reset</button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\n\nexport const SequenceElementStatus = {\n  INACTIVE: \"inactive\",\n  GOOD_TIME: \"high\",\n  WARN_TIME: \"med\",\n  CRIT_TIME: \"low\",\n  EXPIRED: \"expired\",\n}\n\nclass SequenceElement extends Component {\n  constructor(props) {\n    super(props);\n    if( typeof this.props.timeRemaining_s === 'undefined')\n    {\n      this.props.timeRemaining_s = this.props.totalTime_s;\n    }\n    if( typeof this.props.status === 'undefined')\n    {\n      this.props.status = SequenceElementStatus.INACTIVE;\n    }\n  }\n\n  render() {\n    const { totalTime_s, timeRemaining_s } = this.props;\n    let remainingSeconds = (\"0\" + (timeRemaining_s % 60)).slice(-2);\n    let remainingMinutes = (\"0\" + (Math.floor(timeRemaining_s / 60) % 60)).slice(-2);\n    let totalSeconds = (\"0\" + (totalTime_s % 60)).slice(-2);\n    let totalMinutes = (\"0\" + (Math.floor(totalTime_s / 60) % 60)).slice(-2);\n    const safariRenderHack = { opacity : timeRemaining_s % 2 ? 0.99 : 1};\n    return (\n      <div className={\"SequenceElementBlock Block-\" + this.props.status}\n           style={safariRenderHack}>\n        <p className={\"SequenceElementTitle Title-\" + this.props.status}>\n          {this.props.name}\n        </p>\n        <p className={\"SequenceElementTimeRemaining Time-\" + this.props.status}>\n          {remainingMinutes}:{remainingSeconds} / {totalMinutes}:{totalSeconds}\n        </p>\n      </div>\n    )\n  }\n}\n\nSequenceElement.propTypes = {\n  name: PropTypes.string,\n  totalTime_s: PropTypes.number,\n  timeRemaining_s: PropTypes.number,\n};\n\nSequenceElement.defaultProps = {\n  name: \"\",\n  totalTime_s: 0,\n};\n\nexport default SequenceElement;\n","import React, { Component } from \"react\";\nimport {SequenceElementStatus} from \"./SequenceElement\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\n\nclass SequenceTimeline extends Component {\n  render() {\n    var timeToAllocate = this.props.elapsedSeconds;\n    var completedElements = 0;\n    const updatedChildren = React.Children.map(this.props.children,\n                                               (child, i) => {\n                                                let timeToReduce = Math.min(child.props.totalTime_s, timeToAllocate);\n                                                let timeRemaining_s = child.props.totalTime_s - timeToReduce;\n                                                timeToAllocate -= timeToReduce;\n                                                if(timeRemaining_s === 0) {\n                                                  completedElements++;\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.EXPIRED })\n                                                } else if(timeRemaining_s <= this.props.critThreshold) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.CRIT_TIME })\n                                                } else if(timeRemaining_s <= this.props.warnThreshold) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.WARN_TIME })\n                                                } else if( timeToReduce > 0 || i === completedElements ) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.GOOD_TIME })\n                                                } else {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.INACTIVE })\n                                                }\n                                               });\n\n    return (\n      <div className=\"SequenceTimeline\">\n        { updatedChildren }\n      </div>\n    )\n  }\n}\n\nSequenceTimeline.propTypes = {\n  elapsedSeconds: PropTypes.number,\n  warnThreshold: PropTypes.number,\n  critThreshold: PropTypes.number,\n};\n\nSequenceTimeline.defaultProps = {\n  elapsedSeconds: 0,\n  warnThreshold: 30,\n  critThreshold: 10,\n};\n\nexport default SequenceTimeline;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./App.css\";\nimport \"./manifest.json\";\nimport React from \"react\"\nimport Stopwatch from \"./components/Stopwatch\"\nimport SequenceTimeline from \"./components/SequenceTimeline\"\nimport SequenceElement from \"./components/SequenceElement\"\nimport registerServiceWorker from \"./registerServiceWorker\"\n\nclass App extends React.Component {\n  state = {time_ms : 0}\n\n  updateTime_ms = (newTime_ms) => {\n    this.setState({time_ms: newTime_ms});\n  }\n\n  render() {\n    return (\n      <body>\n        <div className=\"App App-body\">\n          <Stopwatch onChange={this.updateTime_ms}/>\n          <SequenceTimeline elapsedSeconds={Math.floor(this.state.time_ms/1000)}>\n            <SequenceElement name=\"Introductions\"\n                             totalTime_s={120}/>\n            <SequenceElement name=\"Project Presentation\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Project Q&A\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Robot Design Presentation\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Robot Design Q&A\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Core Values Q&A\"\n                             totalTime_s={240}/>\n            <SequenceElement name=\"Team Feedback\"\n                             totalTime_s={240}/>\n          </SequenceTimeline>\n        </div>\n      </body>\n    );\n  }\n}\n\nregisterServiceWorker();\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}