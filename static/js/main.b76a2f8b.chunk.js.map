{"version":3,"sources":["components/Stopwatch.js","components/SequenceElement.js","components/SequenceTimeline.js","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","state","timerOn","timerStart","timerTime","startTimer","setState","Date","now","timer","setInterval","props","onChange","stopTimer","clearInterval","resetTimer","this","seconds","Math","floor","slice","minutes","className","onClick","Component","SequenceElementStatus","SequenceElement","timeRemaining_s","totalTime_s","status","remainingSeconds","remainingMinutes","totalSeconds","totalMinutes","name","defaultProps","SequenceTimeline","timeToAllocate","elapsedSeconds","updatedChildren","React","Children","map","children","child","i","timeToReduce","min","cloneElement","critThreshold","warnThreshold","App","time_ms","updateTime_ms","newTime_ms","window","addEventListener","navigator","serviceWorker","register","then","registration","console","log","scope","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b76a2f8b.chunk.js","sourcesContent":["/*\nAdapted from https://github.com/peterdurham/timers-demo/blob/master/src/components/Stopwatch.js\n*/\n\nimport React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Stopwatch extends Component {\n  state = {\n    timerOn: false,\n    timerStart: 0,\n    timerTime: 0\n  };\n\n  startTimer = () => {\n    this.setState({\n      timerOn: true,\n      timerTime: this.state.timerTime,\n      timerStart: Date.now() - this.state.timerTime\n    });\n    this.timer = setInterval(() => {\n      this.setState({\n        timerTime: Date.now() - this.state.timerStart\n      });\n      if(this.props.onChange)\n      {\n        this.props.onChange(this.state.timerTime);\n      }\n    }, 1000);\n  };\n\n  stopTimer = () => {\n    this.setState({ timerOn: false });\n    clearInterval(this.timer);\n  };\n\n  resetTimer = () => {\n    this.setState({\n      timerStart: 0,\n      timerTime: 0\n    });\n    if(this.props.onChange)\n    {\n      this.props.onChange(0);\n    }\n  };\n\n  render() {\n    const { timerTime } = this.state;\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n    return (\n      <div className=\"Stopwatch\">\n        {/*<div className=\"Stopwatch-header\">Stopwatch</div>*/}\n        <div className=\"Stopwatch-display\">\n          {minutes} : {seconds}\n        </div>\n        {this.state.timerOn === false && this.state.timerTime === 0 && (\n          <button onClick={this.startTimer}>Start</button>\n        )}\n        {this.state.timerOn === true && (\n          <button onClick={this.stopTimer}>Stop</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n          <button onClick={this.startTimer}>Resume</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n          <button onClick={this.resetTimer}>Reset</button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\n\nexport const SequenceElementStatus = {\n  INACTIVE: \"inactive\",\n  GOOD_TIME: \"high\",\n  WARN_TIME: \"med\",\n  CRIT_TIME: \"low\",\n  EXPIRED: \"expired\",\n}\n\nclass SequenceElement extends Component {\n  constructor(props) {\n    super(props);\n    if( typeof this.props.timeRemaining_s === 'undefined')\n    {\n      this.props.timeRemaining_s = this.props.totalTime_s;\n    }\n    if( typeof this.props.status === 'undefined')\n    {\n      this.props.status = SequenceElementStatus.INACTIVE;\n    }\n  }\n\n  render() {\n    const { totalTime_s, timeRemaining_s } = this.props;\n    let remainingSeconds = (\"0\" + (timeRemaining_s % 60)).slice(-2);\n    let remainingMinutes = (\"0\" + (Math.floor(timeRemaining_s / 60) % 60)).slice(-2);\n    let totalSeconds = (\"0\" + (totalTime_s % 60)).slice(-2);\n    let totalMinutes = (\"0\" + (Math.floor(totalTime_s / 60) % 60)).slice(-2);\n    return (\n      <div className={\"SequenceElementBlock Block-\" + this.props.status}>\n        <p className={\"SequenceElementTitle Title-\" + this.props.status}>\n          {this.props.name}\n        </p>\n        <p className={\"SequenceElementTimeRemaining Time-\" + this.props.status}>\n          {remainingMinutes}:{remainingSeconds} / {totalMinutes}:{totalSeconds}\n        </p>\n      </div>\n    )\n  }\n}\n\nSequenceElement.propTypes = {\n  name: PropTypes.string,\n  totalTime_s: PropTypes.number,\n  timeRemaining_s: PropTypes.number,\n};\n\nSequenceElement.defaultProps = {\n  name: \"\",\n  totalTime_s: 0,\n};\n\nexport default SequenceElement;\n","import React, { Component } from \"react\";\nimport SequenceElement, {SequenceElementStatus} from \"./SequenceElement\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\n\nclass SequenceTimeline extends Component {\n  render() {\n    var timeToAllocate = this.props.elapsedSeconds;\n    const updatedChildren = React.Children.map(this.props.children,\n                                               (child, i) => {\n                                                let timeToReduce = Math.min(child.props.totalTime_s, timeToAllocate);\n                                                let timeRemaining_s = child.props.totalTime_s - timeToReduce;\n                                                timeToAllocate -= timeToReduce;\n                                                if(timeRemaining_s === 0) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.EXPIRED })\n                                                } else if(timeRemaining_s < this.props.critThreshold) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.CRIT_TIME })\n                                                } else if(timeRemaining_s < this.props.warnThreshold) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.WARN_TIME })\n                                                } else if( timeToReduce > 0 || (i === 0 && this.props.elapsedSeconds === 0)) {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.GOOD_TIME })\n                                                } else {\n                                                  return React.cloneElement(child, {\n                                                    timeRemaining_s: timeRemaining_s,\n                                                    status: SequenceElementStatus.INACTIVE })\n                                                }\n                                               });\n\n    return (\n      <div className=\"SequenceTimeline\">\n        { updatedChildren }\n      </div>\n    )\n  }\n}\n\nSequenceTimeline.propTypes = {\n  elapsedSeconds: PropTypes.number,\n  warnThreshold: PropTypes.number,\n  critThreshold: PropTypes.number,\n};\n\nSequenceTimeline.defaultProps = {\n  elapsedSeconds: 0,\n  warnThreshold: 30,\n  critThreshold: 10,\n};\n\nexport default SequenceTimeline;","import \"./App.css\";\nimport \"./manifest.json\";\nimport React from \"react\"\nimport Stopwatch from \"./components/Stopwatch\"\nimport SequenceTimeline from \"./components/SequenceTimeline\"\nimport SequenceElement from \"./components/SequenceElement\"\n\nclass App extends React.Component {\n  state = {time_ms : 0}\n\n  updateTime_ms = (newTime_ms) => {\n    this.setState({time_ms: newTime_ms});\n  }\n\n  render() {\n    return (\n      <body>\n        <script>\n          if ('serviceWorker' in navigator){\n            window.addEventListener('load', function() {\n              navigator.serviceWorker.register('serviceWorker.js').then(function(registration) {\n                // Registration was successful\n                console.log('ServiceWorker registration successful with scope: ', registration.scope);\n              }, function(err) {\n                // registration failed :(\n                console.log('ServiceWorker registration failed: ', err);\n              });\n            })\n          }\n        </script>\n        <div className=\"App App-body\">\n          <Stopwatch onChange={this.updateTime_ms}/>\n          <SequenceTimeline elapsedSeconds={Math.floor(this.state.time_ms/1000)}>\n            <SequenceElement name=\"Introductions\"\n                             totalTime_s={120}/>\n            <SequenceElement name=\"Project Presentation\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Project Q&A\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Robot Design Presentation\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Robot Design Q&A\"\n                             totalTime_s={300}/>\n            <SequenceElement name=\"Core Values Q&A\"\n                             totalTime_s={240}/>\n            <SequenceElement name=\"Team Feedback\"\n                             totalTime_s={240}/>\n          </SequenceTimeline>\n        </div>\n      </body>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}